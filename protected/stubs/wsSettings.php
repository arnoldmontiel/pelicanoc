<?php
/**
* Soap client wsSettings
*
* Autogenerated with the Yii extension wsdl2php.
*/

class UserSOAP
{
	public $username; //string;
	public $password; //string;
	public $email; //string;
	public $adult_section; //integer;
	public $deleted; //integer;
	public $birth_date; //date;
}

class SabnzbdAccountSOAP
{
	public $Id; //integer;
	public $server_name; //string;
	public $username; //string;
	public $password; //string;
	public $name; //string;
	public $host; //string;
	public $enable; //integer;
	public $fill_server; //string;
	public $connections; //integer;
	public $ssl; //integer;
	public $timeout; //integer;
	public $optional; //integer;
	public $port; //integer;
	public $retention; //integer;
	public $Id_device; //string;
}

class PlayerSOAP
{
	public $Id; //integer;
	public $description; //string;
	public $url; //string;
	public $type; //integer;
	public $file_protocol; //string;
	public $Id_device; //string;
}

class ConfigurationSOAP
{	
	public $sabnzb_api_key; //string;
	public $host_file_server; //string;
	public $host_file_server_path; //string;
	public $host_file_server_user; //string;
	public $host_file_server_passwd; //string;
	public $host_file_server_name; //string;
	public $is_movie_tester; //integer;
	public $host_name; //string;
	public $michael_jackson; //string;
	public $tmdb_api_key; //string;
	public $tmdb_lang; //string;
	public $SabnzbdAccounts; //SabnzbdAccountSOAP[];
	public $Players; //PlayerSOAP[];	
}

class CustomerSettingsResponse
{
	public $Id_customer; //integer;
	public $Id_reseller; //integer;
	public $Id_device; //string;
	public $name; //string;
	public $last_name; //string;
	public $address; //string;
	public $Configuration; //ConfigurationSOAP;
	public $Users; //UserSOAP[];
}


class ClientError
{
	public $error_type; //integer;
	public $has_error; //integer;
	public $date; //date;
}

class ClientSettingsRequest extends SOAP2Array
{
	public $Id_device; //string;
	public $ip_v4; //string;
	public $port_v4; //integer;
	public $ip_v6; //string;
	public $port_v6; //integer;
	public $is_nas_alive; //integer;
	public $disc_used_space; //string;
	public $disc_total_space; //string;
	public $ClientError; //ClientError[];
}

class ServerAnydvdUpdateResponse
{
	public $version; //string;
	public $file_name; //string;
	public $download_link; //string;
}

class ServerSettingsRipperResponse
{
	public $drive_letter; //string;
	public $temp_folder_ripping; //string;
	public $final_folder_ripping; //string;
	public $time_from_reboot; //time;
	public $time_to_reboot; //time;
	public $mymovies_username; //string;
	public $mymovies_password; //string;
	
}

/**
* The soap client proxy class
*/
class wsSettings 
 {
	public $soapClient;

	private static $classmap = array(
		'ClientSettingsRequest'=>'ClientSettingsRequest',
		'ServerAnydvdUpdateResponse'=>'ServerAnydvdUpdateResponse',
		'CustomerSettingsResponse'=>'CustomerSettingsResponse',
	);

function __construct($url='http://localhost/workspace/PelicanoS')
{
	ini_set ('soap.wsdl_cache_enabled',0);
	
	$url = Setting::getInstance()->host_name.Setting::getInstance()->host_path."/index.php?r=WSSettings/wsdl";
	$this->soapClient = new SoapClient($url,array("classmap"=>self::$classmap,"trace" => true,"exceptions" => true));
}


	function setClientSettings($ClientSettingsRequest)
	{
		$boolean = $this->soapClient->setClientSettings($ClientSettingsRequest);
		return $boolean;
	}
	function setAnydvdVersionDownloaded($idDevice,$version)
	{
		return $this->soapClient->setAnydvdVersionDownloaded($idDevice,$version);
	}
	public function setAnydvdVersionInstalled($idDevice,$version)
	{
		return $this->soapClient->setAnydvdVersionInstalled($idDevice,$version);
		
	}
	function checkForUpdate($idDevice)
	{
		$ServerAnydvdUpdateResponse = $this->soapClient->checkForUpdate($idDevice);
		return $ServerAnydvdUpdateResponse;
	}
 	function getDeviceTunnelPort($idDevice)
	{
		$TunnelingPortResponse = $this->soapClient->getDeviceTunnelPort($idDevice);
		return $TunnelingPortResponse;
	}	
  	function ackDeviceTunnelPort($idDevice, $ports)
	{
		$TunnelingPortResponse = $this->soapClient->ackDeviceTunnelPort($idDevice, $ports);
	}		
	
	function getRipperSettings($idDevice)
	{
		$serverSettingsRipperResponse = $this->soapClient->getRipperSettings($idDevice);
		return $serverSettingsRipperResponse;
	}
	function getCustomerSettings($idDevice)
	{
		$result = false;
		if(isset($this->soapClient))
		{
			$result = $this->soapClient->getCustomerSettings($idDevice);
		}
		return $result;
	}
	function ackCustomerSettings($idDevice)
	{
		$result = false;
		if(isset($this->soapClient))
		{
			$result = $this->soapClient->ackCustomerSettings($idDevice);
		}
		return $result;
	}
}


