<?php
/**
* Soap client MyMoviesAPI
*
* Autogenerated with the Yii extension wsdl2php.
*/



class LoadDiscTitleById
{
	public $Handshake; //string;
	public $UserName; //string;
	public $Password; //string;
	public $Reference; //string;
	public $TitleId; //string;
	public $Client; //string;
	public $Version; //string;
	public $Locale; //int;
	}
	
	class LoadDiscTitleByIdResponse
	{
	public $LoadDiscTitleByIdResult; //LoadDiscTitleByIdResult;
	}
	
	class LoadDiscTitleByIdResult
	{
	public $any; //string;
	}
	
	
	/**
	* The soap client proxy class
	*/
	class MyMoviesAPI 
	 {
		public $soapClient;
	
		private static $classmap = array(
			'LoadDiscTitleById'=>'LoadDiscTitleById',
			'LoadDiscTitleByIdResponse'=>'LoadDiscTitleByIdResponse',
			'LoadDiscTitleByIdResult'=>'LoadDiscTitleByIdResult',
	
	);
	
	function __construct($url='https://api.mymovies.dk/default.asmx?WSDL')
	{
		ini_set ('soap.wsdl_cache_enabled',0);
		$this->soapClient = new SoapClient($url,array("classmap"=>self::$classmap,"trace" => true,"exceptions" => false));
	}
	
	
	function LoadDiscTitleById($myMovieId)
	{
		$model = new LoadDiscTitleById();
		$model->UserName = "arnoldMontiel";
		$model->Password = "Arnold";
		$model->TitleId = $myMovieId;
		$model->Locale = 0;
		
		$LoadDiscTitleByIdResponse = $this->soapClient->LoadDiscTitleById($model);
		
		$idImdb = "";
		if(isset($LoadDiscTitleByIdResponse))
		{
			$idImdb = $this->saveMyMovie(simplexml_load_string($LoadDiscTitleByIdResponse->LoadDiscTitleByIdResult->any));
		}	
		 
		return $idImdb;
	}

	private function saveMyMovie($data)
	{
		$idImdb = "";
		if(!empty($data) && (string)$data['status'] == 'ok')
		{
			if(!empty($data->Title))
				$data = $data->Title;
			else
				return $idImdb;
			
			$modelMyMovieDB = MyMovie::model()->findByPk((string)$data->ID);
			
			if(!isset($modelMyMovieDB))
			{
				$modelMyMovie = new MyMovie();
				
				$modelMyMovie->Id = (string)$data->ID;
				$modelMyMovie->type = (string)$data->Type;
				$modelMyMovie->bar_code = (string)$data->Barcode;
				$modelMyMovie->country = (string)$data->Country;
				$modelMyMovie->local_title = (string)$data->LocalTitle;
				$modelMyMovie->original_title = (string)$data->OriginalTitle;
				$modelMyMovie->sort_title = (string)$data->SortTitle;
				$modelMyMovie->aspect_ratio = (string)$data->AspectRatio;
				$modelMyMovie->video_standard = (string)$data->VideoStandard;
				$modelMyMovie->production_year = (string)$data->ProductionYear;
				$modelMyMovie->release_date = (string)$data->ReleaseDate;
				$modelMyMovie->running_time = (string)$data->RunningTime;
				$modelMyMovie->description = (string)$data->Description;
				$modelMyMovie->extra_features = (string)$data->ExtraFeatures;
				
				$modelMyMovie->parental_rating_desc = (!empty($data->ParentalRating)?(string)$data->ParentalRating->Description:"");
				
				$modelMyMovie->imdb = (string)$data->IMDB;
				$modelMyMovie->rating = (string)$data->Rating;
				$modelMyMovie->data_changed = (string)$data->DataChanged;
				$modelMyMovie->covers_changed = (string)$data->CoversChanged;
				
				//Obtengo la lista de los generos
				$modelMyMovie->genre = implode(", ",$this->xmlToArray($data->Genres));
				
				//Obtengo la lista de los estudios
				$modelMyMovie->studio =  implode(", ",$this->xmlToArray($data->Studios));
				
				$modelMyMovie->save();
				
				$this->saveAudioTrack($data);
				$this->saveSubtitle($data);
			}
		
			$idImdb = (string)$data->IMDB;
		}
		return $idImdb;
	}
	
	private function xmlToArray($xml)
	{
		$xmlArr = array();
		$index = 0;
		foreach($xml->children() as $item)
		{
			$xmlArr[$index] = (string)$item;
			$index ++;
		}
		return $xmlArr;
	}

	private function saveAudioTrack($xml)
	{
		
		$idMyMovie = (string)$xml->ID;
		
		foreach($xml->AudioTracks->children() as $item)
		{
			$language = (string)$item['Language'];
			$type = (string)$item['Type'];
			$chanels = (string)$item['Channels'];
			
			$modelAudioTrackDB = AudioTrack::model()->findByAttributes(array(
													'language'=>$language,
													'type'=>$type,
													'chanel'=>$chanels,));
			
			$modelMyMovieAudioTrack = new MyMovieAudioTrack();
			$modelMyMovieAudioTrack->Id_my_movie = $idMyMovie;
			
			if(isset($modelAudioTrackDB))
			{
				$modelMyMovieAudioTrack->Id_audio_track = $modelAudioTrackDB->Id;
			}
			else
			{
				$modelAudioTrack = new AudioTrack();
				$modelAudioTrack->language = $language;
				$modelAudioTrack->type = $type;
				$modelAudioTrack->chanel = $chanels;
				$modelAudioTrack->save();
				
				$modelMyMovieAudioTrack->Id_audio_track = $modelAudioTrack->Id;
			}
			
			$modelMyMovieAudioTrack->save();

		}
	}
	
	private function saveSubtitle($xml)
	{
	
		$idMyMovie = (string)$xml->ID;
	
		foreach($xml->Subtitles->children() as $item)
		{
			$language = (string)$item['Language'];
				
			$modelSubtitleDB = Subtitle::model()->findByAttributes(array(
														'language'=>$language,
														));
				
			$modelMyMovieSubtitle = new MyMovieSubtitle();
			$modelMyMovieSubtitle->Id_my_movie = $idMyMovie;
				
			if(isset($modelSubtitleDB))
			{
				$modelMyMovieSubtitle->Id_subtitle = $modelSubtitleDB->Id;
			}
			else
			{
				$modelSubtitle = new Subtitle();
				$modelSubtitle->language = $language;
				$modelSubtitle->save();
	
				$modelMyMovieSubtitle->Id_subtitle = $modelSubtitle->Id;
			}
				
			$modelMyMovieSubtitle->save();
	
		}
	}
}


